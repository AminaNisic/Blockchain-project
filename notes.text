pragma solidity ^0.8.0;

import "https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/cryptography/ECDSA.sol";

contract Poll {
    uint256 public totalVotes;
    string public question;
    string[] public answers;

    mapping (bytes32 => uint256) public encryptedVotes;
    mapping (address => uint256) public voters;

    constructor(string memory _question, string[] memory _answers) public {
        question = _question;
        answers = _answers;
        totalVotes = 0;
    }

    function vote(uint256 _answerIndex) public {
        require(_answerIndex < answers.length, "Answer index out of range");
        require(voters[msg.sender] == 0, "You have already voted");
        voters[msg.sender] = _answerIndex + 1;
        totalVotes++;
        bytes32 encryptedVote = ECDSA.hash(abi.encodePacked(_answerIndex, msg.sender));
        encryptedVotes[encryptedVote]++;
    }

    function decryptVotes() public view returns (uint256[]) {
        uint256[] memory decryptedVotes = new uint256[](answers.length);
        for (bytes32 encryptedVote in encryptedVotes) {
            uint256 decryptedVote = abi.decode(encryptedVote, (uint256, address));
            decryptedVotes[decryptedVote] += encryptedVotes[encryptedVote];
        }
        return decryptedVotes;
    }
}
